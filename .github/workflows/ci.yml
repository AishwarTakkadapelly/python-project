name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3 
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        pytest
      env:
        PYTHONPATH: ${{ github.workspace }}  # Ensuring the PYTHONPATH is set to the project root

    - name: Build Docker image
      run: |
        docker build -t my-python-app .

    - name: Run Docker container
      run: |
        docker run -d -p 5000:5000 --name my-python-app-container my-python-app
        echo "Waiting for the Flask app to start..."
        for i in {1..5}; do
          if curl -f http://localhost:5000; then
            echo "App is up!"
            break
          else
            echo "App is not ready yet. Retrying in 5 seconds..."
            sleep 5
          fi
          if [ $i -eq 5 ]; then
            echo "App failed to start in time. Exiting."
            docker logs my-python-app-container
            exit 1
          fi
        done

    - name: Push Docker image (optional)
      if: github.event_name == 'push'
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      run: |
        echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
        docker tag my-python-app $DOCKER_HUB_USERNAME/my-python-app:latest
        docker push $DOCKER_HUB_USERNAME/my-python-app:latest

deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Install SSH Client
      run: sudo apt-get update -qq && sudo apt-get install -qqy openssh-client

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          set -e
          echo "Starting deployment on EC2 instance..."
          
          # Check Docker status and install if necessary
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            echo "Docker installed and started."
          else
            echo "Docker is already installed."
          fi

          echo "Pulling Docker image..."
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/node:latest

          echo "Stopping and removing old container..."
          sudo docker stop app.py || true
          sudo docker rm app.py || true

          echo "Running new container..."
          sudo docker run -d -p 5000:5000 --name app.py ${{ secrets.DOCKER_HUB_USERNAME }}/app.py:latest

          echo "Deployment complete."
        timeout: 30s
        command_timeout: 10m
        debug: true
    